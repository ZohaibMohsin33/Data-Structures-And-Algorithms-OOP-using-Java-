We use PascalNamingConvention in java for classes and camelCase for methods and variables.

Java was developed by James Gosling in 1995.
Java  works on runtime environment.
Originally it called oak then green and then the java due to type of coffee named as java and it's logo is same. 

4 Editions of Java for building different kind of Applications.

Standard Edition(SE):
Core Java 
Contain every library that java developer must learn.

Enterprise Edition(EE):
Use in building very large scale and distributed systems.
It's build on top of java standard edition and provides additional libraries for building fault-tolerant distributed multi-tiered softwares.

Micro Edition (ME):
subset of java standard edition desigined for mobile devices, it has libraries specially for mobile devices.

Java Card (JC):
Used in smart cards

Primitive Datatypes:   Any data type that can't be break into any other datatype
long viewCount = 3_123_123_123L;
//we use underscore instead of commas

int rating  = 6;
long number - 87459l;
float price = 10.99F;
double hi = 32.23;
char letter =  "a";
boolean isEligible = true/false;

Note : 

import java.util.Date;
Date now = new Date();
now.getTime();

import java.awt.*;

Point point1 = new Point (x:1, y:1);    //here it got assigned some value 
Point point2 = point1;                  // It got the memory location of the first pointer object
'+' is the sign uses for concatenation.

string build-in functions

String message = "Hello Brother";
System.out.println(message.startsWith("!"));
similarly endsWith("!!");
message.length();
message.indexOf("age");
message.replace("target","replacement");  //Any method can't mutate our original string they just send new string.
message.trim()

Escape characters:

"heloo \"broh";
"Hello \n World"           \n New Line;
\t tab

Arrays:

int[] numbers = new int[5] //5 is the number of entries;
numbers[0] = 2;

or 

int[] numbers = {1,2,3};
Arrays.sort(numbers);
System.out.println(Arrays.toString(numbers));
System.out.println(numbers.length);

Multi-dimentional arrays:
int[][] numbers = new int[2][3];
or 
int[][] numbers = {{12,12},{13,12}};
System.out.println(Arrays.deepToString(numbers))  // to output multidim Array in a proper way.


Constants:

float PI = 3.142;  //Here's it's a variable
final float PI = 3.142;  //It's the constant.


Arithematic Operators:

int res = 10/3;
double res = (double) 10/ (double) 3;


Casting:

byte>short>int>long>float>double

implicit casting
short x = 1;
int y = x + 2;

Explicit casting
double x = 1; 
int y = (int)x + 2;

Two incompatible classes can't cast without some external class.

String x = "1";

Integer.parseInt();
Short.parseShort();
Float.parseFloat();
.
.
.
.

int y = (int)x + 2;
System.out.println(y);

Math Class:

Math.round(7.4);
Math.ceil(3.5);
Math.floor(2.3);
Math.max(4,5);
Math.min(1,2);
Math.random()  //it returns a double.


Numbers format in java:

NumberFormat currency = new NumberFormat() // it's object can't be created because it's an abstract class
NumberFormat currency = NumberFormat.getCurrencyInstance();
//                              //   getPercentInstance();

String result = currency.format(13442.24);
System.out.println(result);

 or

NumberFormat.getPercentInstance().format(0.1) //shortcut

Reading Inputs:
import java.utils.Scanner
Scanner scanner = new Scanner(System.in)
byte age = scanner.nextByte();
Float age =       .nextFloat();
                  .nextDouble();
                  .nextString();
String name = scanner.next(); can be possible for single value
                     .nextLine(); can store multiple values.
                     .nextLine().trim();


For Each Loop:
for(String fruit : fruits){
      System.out.println(fruit);
}

Type promotion : 

All the byte, short and char will be promoted into int 
If operand is double then whole expression will be in double 
if operand is in long then whole expression will be in long 
